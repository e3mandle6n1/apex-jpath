/*
 *
 * This file outlines the correct protocol for testing JSONPath queries
 * in an Execute Anonymous window to test for correctness and avoid hitting Salesforce Governor Limits.
 *
 * =======================================================================
 * TOPIC: JSONPath, JPath Querying, Apex CPU Time, Heap Size, and Debug Log Limits
 * =======================================================================
 *
 * ‚ö†Ô∏è WARNING: APEX GOVERNOR LIMITS ‚ö†Ô∏è
 * The Problem:
 * When running multiple or complex JSONPath queries within a single Execute Anonymous
 * block, the act of serializing the results (JSON.serialize()) and writing them to the
 * log buffer (System.debug()) can quickly exhaust Governor Limits. Even when other queries are
 * commented out. The Execute Anonymous window takes as input your ENTIRE anonymous class contents including comments.
 *
 * Specifically:
 * 1. CPU Time Limit (10,000ms): Serializing a large object is computationally expensive.
 * 2. Debug Log Size Limit (20MB): Generating massive log entries fills the buffer quickly.
 *
 * The Symptom:
 * You may encounter non-specific errors indicating a *logging* or *serialization* issue,
 * NOT necessarily a bug in the JSONPath query itself:
 * - HTTP ERROR 431 Request Header Fields Too Large
 * - System.LimitException: Apex CPU time limit exceeded
 * - Apex heap size too large
 *
 * =======================================================================
 * DEVELOPER PROTOCOL: RUNNING ISOLATED TESTS
 * =======================================================================
 * üö® DO NOT run multiple tests in the same Execute Anonymous window. üö®
 * You MUST run each query test individually to ensure isolation.
 */

// =======================================================================
// STEP 1: SET UP THE JSON PAYLOAD AND JSONPATH INSTANCE (Copy for every test)
// YOU CAN PROVIDE THE JSON PAYLOAD ESCAPED/ UNESCAPED. 
// JPATH IS LIKE A BARBER IT TAKES CARE OF YOUR TRIM.
// =======================================================================

String jsonPayload = '{' +
    '"company": {' +
        '"name": "Ubuntu Digital Group",' +
        '"founded": 1998,' +
        '"headquarters": {' +
            '"address": "4th Floor, V&A Waterfront Tower",' +
            '"city": "Cape Town",' +
            '"province": "Western Cape",' +
            '"zip": 8001,' +
            '"country": "South Africa"' +
        '},' +
        '"departments": [' +
            '{' +
                '"name": "Cloud Engineering",' +
                '"manager": {' +
                    '"name": "Thandiwe Mkhize",' +
                    '"age": 44,' +
                    '"yearsOfExperience": 18,' +
                    '"skills": ["Azure", "AWS", "DevOps", "Apex"]' +
                '},' +
                '"employees": [' +
                    '{' +
                        '"name": "Kyle Naidoo",' +
                        '"age": 35,' +
                        '"role": "Senior Cloud Developer",' +
                        '"salary": 980000,' +
                        '"projects": [' +
                            '{' +
                                '"name": "Loadshedding Predictor API",' +
                                '"status": "Completed",' +
                                '"budget": 650000,' +
                                '"teamSize": 10' +
                            '},' +
                            '{' +
                                '"name": "SA ID Verification Service",' +
                                '"status": "In Progress",' +
                                '"budget": 400000,' +
                                '"teamSize": 8' +
                            '}' +
                        '],' +
                        '"active": true' +
                    '},' +
                    '{' +
                        '"name": "Lerato Zwane",' +
                        '"age": 27,' +
                        '"role": "Junior Data Analyst",' +
                        '"salary": 550000,' +
                        '"projects": [' +
                            '{' +
                                '"name": "e-Toll Data Migration",' +
                                '"status": "Planning",' +
                                '"budget": 250000,' +
                                '"teamSize": 5' +
                            '}' +
                        '],' +
                        '"active": true' +
                    '},' +
                    '{' +
                        '"name": "Pieter Botha",' +
                        '"age": 48,' +
                        '"role": "Enterprise Architect",' +
                        '"salary": 1300000,' +
                        '"projects": [],' +
                        '"active": false' +
                    '}' +
                '],' +
                '"budget": 25000000' +
            '},' +
            '{' +
                '"name": "Commercial Solutions",' +
                '"manager": {' +
                    '"name": "Zola Ndlovu",' +
                    '"age": 37,' +
                    '"yearsOfExperience": 11,' +
                    '"skills": ["Client Relations", "Negotiation", "BEE Compliance"]' +
                '},' +
                '"employees": [' +
                    '{' +
                        '"name": "Ahmed Patel",' +
                        '"age": 31,' +
                        '"role": "Key Account Manager",' +
                        '"salary": 780000,' +
                        '"dealsClosed": [7, 15, 9],' +
                        '"active": true' +
                    '},' +
                    '{' +
                        '"name": "Jabu Malinga",' +
                        '"age": 29,' +
                        '"role": "Sales Specialist",' +
                        '"salary": 750000,' +
                        '"dealsClosed": [12, 18],' +
                        '"active": true' +
                    '}' +
                '],' +
                '"budget": 18000000' +
            '}' +
        '],' +
        '"products": [' +
            '"FinScope Platform",' +
            '"Eskom-Optimiser App",' +
            '"AgriTrack System"' +
        '],' +
        '"revenue": {' +
            '"yearly": [150000000, 180000000, 220000000],' +
            '"quarterly": {' +
                '"Q1": 40000000,' +
                '"Q2": 45000000,' +
                '"Q3": 50000000,' +
                '"Q4": 85000000' +
            '}' +
        '},' +
        '"misc": null' +
    '}' +
'}';

JSONPath jp = new JSONPath(jsonPayload);

// =======================================================================
// STEP 2: RUN ISOLATED EXAMPLES (Copy only ONE block below at a time)
// =======================================================================

// === TEST 1: Root Selection ($) ===
List<Object> rootResult = jp.selectPath('$');
System.debug('Root: ' + JSON.serialize(rootResult));
// Expected: [{"company":{...}}]

// === TEST 2: Simple Property Access ($.company.name) ===
List<Object> companyName = jp.selectPath('$.company.name');
System.debug('Company Name: ' + JSON.serialize(companyName));
// Expected: ["Ubuntu Digital Group"]

// === TEST 3: Nested Property ($.company.headquarters.city) ===
List<Object> hqCity = jp.selectPath('$.company.headquarters.city');
System.debug('HQ City: ' + JSON.serialize(hqCity));
// Expected: ["Cape Town"]

// === TEST 4: Array Index (Positive: [0].name) ===
List<Object> firstDeptName = jp.selectPath('$.company.departments[0].name');
System.debug('First Department Name: ' + JSON.serialize(firstDeptName));
// Expected: ["Cloud Engineering"]

// === TEST 5: Array Index (Negative: [-1].name) ===
List<Object> lastDeptName = jp.selectPath('$.company.departments[-1].name');
System.debug('Last Department Name: ' + JSON.serialize(lastDeptName));
// Expected: ["Commercial Solutions"]

// === TEST 6: Wildcard on Object ($.company.revenue.quarterly.*) ===
List<Object> quarterlyValues = jp.selectPath('$.company.revenue.quarterly.*');
System.debug('Quarterly Values: ' + JSON.serialize(quarterlyValues));
// Expected: [40000000, 45000000, 50000000, 85000000]

// === TEST 7: Wildcard on Array ($.company.products.*) ===
List<Object> allProducts = jp.selectPath('$.company.products.*');
System.debug('All Products: ' + JSON.serialize(allProducts));
// Expected: ["FinScope Platform", "Eskom-Optimiser App", "AgriTrack System"]

// === TEST 8: Recursive Descent ($..name) - POTENTIAL LIMIT RISK, Check Size! ===
List<Object> allNames = jp.selectPath('$..name');
System.debug('All Names (Count): ' + allNames.size()); // Use size for large sets
// Expected Count: 10

// === TEST 9: Recursive Descent Wildcard ($..*) - HIGH LIMIT RISK, Check Size! ===
List<Object> allRecursive = jp.selectPath('$..*');
System.debug('All Recursive (Count): ' + allRecursive.size());
// Expected Count: ~80 (confirm it's a large number)
System.debug('All Recursive (limited debug): ' + JSON.serialize(allRecursive).substring(0, 200) + '...');

// === TEST 10: Union on Array Indices ($.company.products[0,2]) ===
List<Object> firstAndThirdProduct = jp.selectPath('$.company.products[0,2]');
System.debug('First and Third Product: ' + JSON.serialize(firstAndThirdProduct));
// Expected: ["FinScope Platform", "AgriTrack System"]

// === TEST 11: Union on Object Keys ($.company.revenue.quarterly["Q1","Q3"]) ===
List<Object> q1AndQ3 = jp.selectPath('$.company.revenue.quarterly["Q1","Q3"]');
System.debug('Q1 and Q3: ' + JSON.serialize(q1AndQ3));
// Expected: [40000000, 50000000]

// === TEST 12: Slice (Full Array: [:] ) ===
List<Object> allYearly = jp.selectPath('$.company.revenue.yearly[:]');
System.debug('All Yearly: ' + JSON.serialize(allYearly));
// Expected: [150000000, 180000000, 220000000]

// === TEST 13: Slice with Start and End ($.company.revenue.yearly[0:2]) ===
List<Object> firstTwoYearly = jp.selectPath('$.company.revenue.yearly[0:2]');
System.debug('First Two Yearly: ' + JSON.serialize(firstTwoYearly));
// Expected: [150000000, 180000000]

// === TEST 14: Slice with Step ($.company.departments[1].employees[0].dealsClosed[::2]) ===
List<Object> everyOtherDeal = jp.selectPath('$.company.departments[1].employees[0].dealsClosed[::2]');
System.debug('Every Other Deal: ' + JSON.serialize(everyOtherDeal));
// Expected: [7, 9]

// === TEST 15: Slice with Negative Range ($.company.revenue.yearly[-2:]) ===
List<Object> lastTwoYearly = jp.selectPath('$.company.revenue.yearly[-2:]');
System.debug('Last Two Yearly: ' + JSON.serialize(lastTwoYearly));
// Expected: [180000000, 220000000]

// === TEST 16: Slice with Negative Step (Reverse: [::-1]) ===
List<Object> reverseYearly = jp.selectPath('$.company.revenue.yearly[::-1]');
System.debug('Reverse Yearly: ' + JSON.serialize(reverseYearly));
// Expected: [220000000, 180000000, 150000000]

// === TEST 17: Filter Existence ($.company.departments[?(@.budget)].name) ===
List<Object> deptsWithBudgetNames = jp.selectPath('$.company.departments[?(@.budget)].name');
System.debug('Departments with Budget Names: ' + JSON.serialize(deptsWithBudgetNames));
// Expected: ["Cloud Engineering", "Commercial Solutions"]

// === TEST 18: Filter Equality (String: $.company.departments[?(@.name == "Cloud Engineering")]) ===
List<Object> engDept = jp.selectPath('$.company.departments[?(@.name == "Cloud Engineering")]');
System.debug('Cloud Engineering Dept: ' + JSON.serialize(engDept));
// Expected: [{"name":"Cloud Engineering", "manager":{...}, "employees":[...], "budget":25000000}]

// === TEST 19: Filter Equality (Number: $.company.departments[0].employees[?(@.salary == 980000)].name) ===
List<Object> highSalaryEmpName = jp.selectPath('$.company.departments[0].employees[?(@.salary == 980000)].name');
System.debug('High Salary Emp Name: ' + JSON.serialize(highSalaryEmpName));
// Expected: ["Kyle Naidoo"]

// === TEST 20: Filter Inequality (String: $.company.departments[*].employees[?(@.role != "Sales Specialist")].name) ===
List<Object> nonSalesSpecialistNames = jp.selectPath('$.company.departments[*].employees[?(@.role != "Sales Specialist")].name');
System.debug('Non-Sales Specialist Names: ' + JSON.serialize(nonSalesSpecialistNames));
// Expected: ["Kyle Naidoo", "Lerato Zwane", "Pieter Botha", "Ahmed Patel"]

// === TEST 21: Filter Greater Than ($.company.departments[*].employees[?(@.age > 30)].name) ===
List<Object> experiencedEmps = jp.selectPath('$.company.departments[*].employees[?(@.age > 30)].name');
System.debug('Experienced Emps (Names): ' + JSON.serialize(experiencedEmps));
// Expected: ["Kyle Naidoo", "Pieter Botha", "Ahmed Patel"]

// === TEST 22: Filter Less Than or Equal (<=: $.company.departments[0].employees[*].projects[?(@.budget <= 400000)].name) ===
List<Object> lowBudgetProjectNames = jp.selectPath('$.company.departments[0].employees[*].projects[?(@.budget <= 400000)].name');
System.debug('Low Budget Project Names: ' + JSON.serialize(lowBudgetProjectNames));
// Expected: ["SA ID Verification Service", "e-Toll Data Migration"]

// === TEST 23: Combined Recursive Filter (All Active Employees: $..employees[?(@.active == true)].name) ===
List<Object> allActiveEmpNames = jp.selectPath('$..employees[?(@.active == true)].name');
System.debug('All Active Emp Names: ' + JSON.serialize(allActiveEmpNames));
// Expected: ["Kyle Naidoo", "Lerato Zwane", "Ahmed Patel", "Jabu Malinga"]

// === TEST 24: Edge Case: Null Value ($.company.misc) ===
List<Object> misc = jp.selectPath('$.company.misc');
System.debug('Misc: ' + JSON.serialize(misc));
// Expected: [null]

// === TEST 25: Edge Case: Empty Array ($.company.departments[0].employees[2].projects) ===
List<Object> noProjects = jp.selectPath('$.company.departments[0].employees[2].projects');
System.debug('No Projects: ' + JSON.serialize(noProjects));
// Expected: [[]]
